from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from datetime import datetime

from keyboards.reply_kb import report_menu_driver_kb
from services.google_sheets import get_records_by_day, get_records_by_month

router = Router()

MONTHS = {
    1: '–Ø–Ω–≤–∞—Ä—å',
    2: '–§–µ–≤—Ä–∞–ª—å',
    3: '–ú–∞—Ä—Ç',
    4: '–ê–ø—Ä–µ–ª—å',
    5: '–ú–∞–π',
    6: '–ò—é–Ω—å',
    7: '–ò—é–ª—å',
    8: '–ê–≤–≥—É—Å—Ç',
    9: '–°–µ–Ω—Ç—è–±—Ä—å',
    10: '–û–∫—Ç—è–±—Ä—å',
    11: '–ù–æ—è–±—Ä—å',
    12: '–î–µ–∫–∞–±—Ä—å'
}


@router.message(F.text == '–û—Ç—á—ë—Ç üìä')
async def report_menu(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –æ—Ç—á—ë—Ç–∞."""

    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞:", reply_markup=report_menu_driver_kb())


@router.message(F.text == "–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å ‚òÄÔ∏è")
async def report_current_day(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å."""

    telegram_id = message.from_user.id
    today = datetime.now().strftime("%d.%m.%Y")

    records = get_records_by_day(telegram_id, today)
    if not records:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    text_lines = [f"–û—Ç—á—ë—Ç –∑–∞ {today}:\n"]

    total_income = total_expense = 0
    for record in records:
        time, record_type, category, amount, comment = record[1], record[2], record[3], record[4], record[5]
        line = f"{time}    {record_type.upper()}   {amount}—Ä—É–±. "
        if comment:
            line += f"{comment}"
        text_lines.append(line)

        try:
            amt = float(amount.replace(',', '.'))
            if record_type == "–¥–æ—Ö–æ–¥":
                total_income += amt
            elif record_type == "—Ä–∞—Å—Ö–æ–¥":
                total_expense += amt
        except ValueError:
            pass

    text_lines.append(f"\n–í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total_income:.2f}")
    text_lines.append(f"\n–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expense:.2f}")
    text_lines.append(f"\n–ü—Ä–∏–±—ã–ª—å: {total_income - total_expense:.2f}")

    await message.answer("\n".join(text_lines))


@router.message(F.text == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü üìÖ")
async def report_current_month(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü."""

    now = datetime.now()
    user_id = message.from_user.id

    records = get_records_by_month(user_id=user_id, month=now.month, year=now.year)
    if not records:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
        return

    total_income = sum(float(r[4]) for r in records if r[2].lower() == "–¥–æ—Ö–æ–¥")
    total_expense = sum(float(r[4]) for r in records if r[2].lower() == "—Ä–∞—Å—Ö–æ–¥")
    total_profit = total_income - total_expense

    await message.answer(f"–û—Ç—á—ë—Ç –∑–∞ {MONTHS[now.month]} {now.year}:\n"
                         f"–í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total_income:.2f}\n"
                         f"–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expense:.2f}\n"
                         f"–ü—Ä–∏–±—ã–ª—å: {total_profit:.2f}")
